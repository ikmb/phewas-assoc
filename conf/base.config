
// Job paramaters to set for this environment


env.SCRIPT_DIR = "$baseDir/bin"
env.PYTHONPATH = env.SCRIPT_DIR
env.PYLIB_DIR = "$baseDir/lib"
env.REPORT_DIR = "$baseDir/report"

// Process setting

process {

  // Global cluster parameters
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

    // ################BASE CONTAINER:################
  container = "docker://ikmb/gwas-assoc:devel"

  shell = ['/bin/bash', '-euo', 'pipefail']
  
  //errorStrategy = { task.exitStatus in [143,137,140,7] ? 'retry' : 'finish' }
  errorStrategy = { task.attempt <= 3 ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'
 
  // processes that usually depend on the sample or variant counts
    // These numbers are suitable for everyday use but might need to
    // be increased for biobank-scale data

    withLabel: base {
      cpus = { check_max( 1 * task.attempt, 'cpus' ) }
      memory = { check_max( 4.GB * task.attempt, 'memory' ) }
      time = { check_max( 4.h * task.attempt, 'time' ) }
    }

    withLabel: python2 {
      cpus = { check_max( 1 * task.attempt, 'cpus' ) }
      memory = { check_max( 8.GB * task.attempt, 'memory' ) }
      time = { check_max( 4.h * task.attempt, 'time' ) }
      container = "docker://python:2.7"
    }

    withLabel: prefilter {
      cpus = { check_max( 4 * task.attempt, 'cpus' ) }
      memory = { check_max( 10.GB * task.attempt, 'memory' ) }
      time = { check_max( 12.h * task.attempt, 'time' ) }
    }

    withLabel: extract_dosage {
      cpus = { check_max( 1 * task.attempt, 'cpus' ) }
      memory = { check_max( 15.GB * task.attempt, 'memory' ) }
      time = { check_max( 12.h * task.attempt, 'time' ) }
    }

    withLabel: big_mem { 
      cpus = { check_max( 1 * task.attempt, 'cpus' ) }
      memory = { 15.GB * task.attempt } 
      time = { check_max( 4.h * task.attempt, 'time' ) }
      }

    withLabel: long_running { 
      cpus = { check_max( 1 * task.attempt, 'cpus' ) }
      memory = { check_max( 8.GB * task.attempt, 'memory' ) }
      time = { 12.h * task.attempt } 
      }

    withLabel: perl { 
      cpus = { check_max( 1 * task.attempt, 'cpus' ) }
      memory = { check_max( 15.GB * task.attempt, 'memory' ) }
      time = { 12.h * task.attempt } 
      }


    withLabel: plink2 {
      cpus = { check_max( 4 * task.attempt, 'cpus' ) }
      memory = { check_max( 15.GB * task.attempt, 'memory' ) }
      time = { check_max( 12.h * task.attempt, 'time' ) }
      container = "docker://quay.io/biocontainers/plink2:2.00a3.7--h9f5acd7_2"
    }

    withLabel: plink {
      cpus = { check_max( 4 * task.attempt, 'cpus' ) }
      memory = { check_max( 15.GB * task.attempt, 'memory' ) }
      time = { check_max( 12.h * task.attempt, 'time' ) }
      container = "docker://quay.io/biocontainers/plink:1.90b6.21--h031d066_5"
    }

    withLabel: bcftools {
      cpus = { check_max( 1 * task.attempt, 'cpus' ) }
      memory = { check_max( 4.GB * task.attempt, 'memory' ) }
      time = { check_max( 4.h * task.attempt, 'time' ) }
      container = "docker://ikmb/gwas-assoc:devel"
    }

    withLabel: flashpca2 { 
      cpus = { check_max( 8 * task.attempt, 'cpus' ) }
      memory = { 15.GB * task.attempt } 
      time = { check_max( 16.h * task.attempt, 'time' ) }
      container = "docker://eikematthias/flashpca:latest"
    }
    
    withLabel: regenie {
      cpus = { check_max( 8 * task.attempt, 'cpus' ) }
      memory = { check_max( 15.GB * task.attempt, 'memory' ) }
      time = { check_max( 24.h * task.attempt, 'time' ) }
      container = "docker://ghcr.io/rgcgithub/regenie/regenie:v3.2.6.gz"
    }

    withLabel: saige {
      cpus = { check_max( 16 * task.attempt, 'cpus' ) }
      memory = { check_max( 30.GB * task.attempt, 'memory' ) }
      time = { check_max( 24.h * task.attempt, 'time' ) }
      container = "docker://quay.io/biocontainers/r-saige:1.3.1--r43h3710e3a_0"
    }

    // For smaller processes that may get priority on the scheduler
    // because of low resource needs. These are virtually independent
    // from the actual dataset size.
    withLabel: small_mem { 
      memory = { 2.GB * task.attempt } 
      }
    withLabel: short_running {
       time = { 1.h * task.attempt } 
       }

}

params {
  preQCIMDS_HapMap2 = "/assets/annotations/hg19/Hapmap2/hapmap_CEU_JPT_CHB_YRI_r23a_filtered"
  preQCIMDS_1kG = "/assets/annotations/hg19/1000G/1kG"
  preQCIMDS_1kG_sample = "/assets/annotations/hg19/1000G/1000GP_Phase3.sample"
  projection_on_populations_hapmap = "/assets/annotations/hg19/Hapmap2/projection_on_HapMap2_populations.txt"
// projection_on_populations_controls = params.preQCIMDS_HapMap2 + 
  variant_annotation_db = "/assets/annotations/hg19/hg19_annotations.sqlite"
  fasta_reference = "/assets/annotations/hg19/1000G/human_g1k_v37.fasta"
  hapmap2_annotations = "/assets/annotations/hg19/Hapmap2/hapmap2-annotations.txt"
  twtable = "/opt/eigensoft-4.2/src/smarttables/twtable"
  wrayner_strands = "/assets/annotations/wrayner_strands/Source"
}


