params {
//REQUIRED INPUT PARAMETERS
  input_imputed_glob = false
  fam = false
  trait = "binary"
  //build = "37"
  collection_name = "collection_name"
  test = "firth"


//OPTIONAL INPUT PARAMETERS
//phenofile or fam file must be given, both is also okay
  phenofile = false
  additional_regenie_parameter = ""
  pca_dims = 10
  tauInit="1,0"
  pthresh="0.01"
  more_covars = "."
  more_covars_cols = ""
  output = "output/assoc"
  remove_missing_phenotypes = false

//Modules
  disable_regenie = false
  
//BCFTOOLS
  null_filter = "R2>0.8"
  
	run_name = false

	plaintext_email = false

	logo = "${baseDir}/assets/ikmblogo.png"

	email = null

	maxMultiqcEmailFileSize = 25.MB

}

manifest {
  name = "ikmb/gwas-regenie"
  mainScript = 'regenie.nf'
	version = "0.1"
	description = "IKMB GWAS and PHEWAS Association Testing Pipeline"
	author = "Eike Matthias Wacker, Malte RÃ¼hlemann, Lars Wienbrandt & David Ellinghaus"
	homePage = "https://github.com/ikmb/gwas-regenie"
	nextflowVersion = ">=21.10.0"
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
        enabled = true
        file = "${params.output}/pipeline_info/pipeline_timeline.html"
	      overwrite = true
}
report {
        enabled = true
        file = "${params.output}/pipeline_info/pipeline_report.html"
        overwrite = true
}
trace {
        enabled = true
        file = "${params.output}/pipeline_info/pipeline_trace.txt"
        overwrite = true
}
dag {
        enabled = true
        file = "${params.output}/pipeline_info/pipeline_dag.svg"
        overwrite = true
}

profiles {
	standard {
		includeConfig 'conf/base.config'
		includeConfig 'conf/medcluster.config'
    includeConfig 'conf/resources.config'
	}
	local {
    includeConfig 'conf/base.config'
    includeConfig 'conf/local.config'
    includeConfig 'conf/resources.config'
	}
  biomedinf {
    includeConfig 'conf/base.config'
    includeConfig 'conf/biomedinf.config'
    includeConfig 'conf/resources.config'
	}
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
